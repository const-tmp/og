{{ define "body" }}
    {{ $r := slice .receiver 0 1 }}
    {{- $r }}.l.Println(`calling {{ .method.Name }}
args:
{{ join (args .method.Args | appendFormatter) "\n"}}`, {{ join (argNames .method.Args) ", " }})
    {{ join (argNames .method.Results) ", " }} = {{ $r }}.next.{{ .method.Name }}({{ join (argNames .method.Args) ", " }})
    if err != nil {
        {{ $r }}.l.Println(`{{ .method.Name }} Error: %s`, err)
    } else {
        {{ $r }}.l.Println(`{{ .method.Name }} Results:
{{ join (args .method.Results | appendFormatter) "\n"}}`, {{ join (argNames .method.Results) ", " }})
    }
    return
{{- end }}

package middleware
import (
    "context"
    "log"
)
{{ $service_package := .Package }}
{{ range .Astra.Interfaces }}
    {{ $struct := .Name | printf "%sLogging" | lower1 }}
    {{ $receiver := receiver $struct }}

    type {{ $struct }} struct {
    l    *log.Logger
    next {{ $service_package }}.{{ .Name }}
    }

    func NewLoggingMiddleware(l *log.Logger, next {{ $service_package }}.{{ .Name }}) *{{ $struct }} {
    return &{{ $struct }}{l, next}
    }
    {{ range .Methods }}
        {{ template "method" dict "receiver" $receiver "method" . }}
    {{ end }}
{{ end }}
