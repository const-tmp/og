package templates

var CRUDTemplate = `// Code generated by og. DO NOT EDIT.
// Package {{ .Package }} implements database CRUD interface
// for {{ .Type }} using *gorm.DB 
package {{ .Package }}

import (
	"context"
	"github.com/nullc4t/gorm-cruder/crud"
	"gorm.io/gorm"
)

// CRUD is base interface
type CRUD interface {
	Create(ctx context.Context, v {{ .Type }}, omit ...string) (*{{ .Type }}, error)
	GetOrCreate(ctx context.Context, v {{ .Type }}, omit ...string) (*{{ .Type }}, error)
	GetByID(ctx context.Context, v {{ .Type }}) (*{{ .Type }}, error)
	Query(ctx context.Context, v {{ .Type }}, omit ...string) ([]*{{ .Type }}, error)
	QueryOne(ctx context.Context, v {{ .Type }}, omit ...string) (*{{ .Type }}, error)
	UpdateField(ctx context.Context, v {{ .Type }}, column string, value any) error
	Update(ctx context.Context, v {{ .Type }}, omit ...string) (err error)
	UpdateMap(ctx context.Context, v {{ .Type }}, m map[string]any) error
	Delete(ctx context.Context, v {{ .Type }}) error
}

// impl is implementation
type impl struct {
	db   *gorm.DB
	crud crud.GenericCRUD[{{ .Type }}]
}

// NewCRUD is a constructor
func NewCRUD(db *gorm.DB, omit ...string) CRUD {
	return impl{db, crud.New[{{ .Type }}](db, omit...)}
}

func (i impl) Create(ctx context.Context, v {{ .Type }}, omit ...string) (*{{ .Type }}, error) {
	return i.crud.Create(ctx, v, omit...)
}

func (i impl) GetOrCreate(ctx context.Context, v {{ .Type }}, omit ...string) (*{{ .Type }}, error) {
	return i.crud.GetOrCreate(ctx, v, omit...)
}

func (i impl) GetByID(ctx context.Context, v {{ .Type }}) (*{{ .Type }}, error) {
	return i.crud.GetByID(ctx, v)
}

func (i impl) Query(ctx context.Context, v {{ .Type }}, omit ...string) ([]*{{ .Type }}, error) {
	return i.crud.Query(ctx, v, omit...)
}

func (i impl) QueryOne(ctx context.Context, v {{ .Type }}, omit ...string) (*{{ .Type }}, error) {
	return i.crud.QueryOne(ctx, v, omit...)
}

func (i impl) UpdateField(ctx context.Context, v {{ .Type }}, column string, value any) error {
	return i.crud.UpdateField(ctx, v, column, value)
}

func (i impl) Update(ctx context.Context, v {{ .Type }}, omit ...string) (err error) {
	return i.crud.Update(ctx, v, omit...)
}

func (i impl) UpdateMap(ctx context.Context, v {{ .Type }}, m map[string]any) error {
	return i.crud.UpdateMap(ctx, v, m)
}

func (i impl) Delete(ctx context.Context, v {{ .Type }}) error {
	return i.crud.Delete(ctx, v)
}`
